// For Runtime: 4ms

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> arr = new ArrayList();
        int[] freq = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            freq[nums[i]-1]++;
        }
        for(int i=0;i<nums.length;i++){
            if(freq[i] == 0){
                arr.add(i+1);
            }
        }
        return arr;
    }
}


// For Rnutime: 29ms
// Using Cycle Sort

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> arr = new ArrayList();
        int i=0;
        while(i<nums.length){
            int correct = nums[i]-1;
            if(nums[i] != nums[correct]){
                swap(nums,i,correct);
            }
            else{
                i++;
            }
        }

        for(int j=0;j<nums.length;j++){
            if(nums[j]!=j+1){
                arr.add(j+1);
            }
        }

        System.out.println(Arrays.toString(nums));
        return arr;
    }

    public void swap(int[] arr,int wrong,int corr){
        int temp = arr[wrong];
        arr[wrong] = arr[corr];
        arr[corr] = temp;
    }
}
