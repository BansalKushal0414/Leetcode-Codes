//   Runtime: 2ms
//   Using Frequency Array

class Solution {
    public int findDuplicate(int[] nums) {
        int[] freq = new int[nums.length+1];

        for(int i=0;i<nums.length;i++){
            freq[nums[i]]++;
            if(freq[nums[i]] ==2 ){
                return nums[i];
            }
        }
        return -1;
    }
}

//   Runtime: 6ms
//   Using Cycle Sort

class Solution {
    public int findDuplicate(int[] nums) {
        int i = 0;
        while(i<nums.length){
            int correct = nums[i];
            if(nums[i]!=nums[correct]){
                swap(nums,i,correct);
            }
            else{
                i++;
            }
        }
        
        for(int j=0;j<nums.length;j++){
            if(nums[j]!=j){
                return nums[j];
            }
        }
        return i;
    }

    public void swap(int[] arr, int wrong,int corr){
        int temp = arr[wrong];
        arr[wrong] = arr[corr];
        arr[corr] = temp;
    }
}
