//   Runtime: 5ms
//   Using Frequency Array

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> arr = new ArrayList<>();
        int[] freq = new int[nums.length];

        for(int i=0;i<nums.length;i++){
            freq[nums[i]-1]++;
            if(freq[nums[i]-1]==2){
                arr.add(nums[i]);
            }
        }
        return arr;
    }
}


//   Runtime: 6ms
//   Using Cycle Sort

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> arr = new ArrayList<>();


        int n = nums.length;
        for (int i = 0; i < n; i++) {
            while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {
                int temp = nums[i];
                nums[i] = nums[nums[i] - 1];
                nums[temp - 1] = temp;
            }
        }
        
        for(int j=0;j<nums.length;j++){
            if(nums[j]!=j+1){
                arr.add(nums[j]);
            }
        }
        return arr;

    }
}
