//   For Runtime : 40ms (Using Deque)

class Solution {
    
    public int[] nextSmallest(int[] arr){
        Deque<Integer> st = new ArrayDeque<>();
        int n = arr.length;
        int[] res = new int[n];
        res[n-1] = n;
        st.push(n-1);
        for(int i = n-2;i>=0;i--){
            while(st.size() > 0 && arr[st.peek()] >= arr[i]){
                st.pop();
            }
            if(st.size() == 0){
                res[i] = n;
            }
            else{
                res[i] = st.peek();
            }
            st.push(i);
        }
        return res;
    }

    public int[] prevSmallest(int[] arr){
        Deque<Integer> st = new ArrayDeque<>();
        int n = arr.length;
        int[] res = new int[n];
        res[0] = -1;
        st.push(0);
        for(int i = 1;i<n;i++){
            while(st.size() > 0 && arr[st.peek()] >= arr[i]){
                st.pop();
            }
            if(st.size() == 0){
                res[i] = -1;
            }
            else{
                res[i] = st.peek();
            }
            st.push(i);
        }
        return res;
    }
    
    public int largestRectangleArea(int[] heights) {
        int[] pse = prevSmallest(heights);
        int[] nse = nextSmallest(heights);
        int ans[] = new int[heights.length];
        int max = 0;
        for(int i = 0;i<heights.length;i++){
            ans[i] = heights[i] * (nse[i] - pse[i] -1);
            max = Math.max(ans[i],max);
        }
        return max;
    }
}

//  Runtime : 115ms (Using Stack)

class Solution {
    
    public int[] nextSmallest(int[] arr){
        Stack<Integer> st = new Stack<>();
        int n = arr.length;
        int[] res = new int[n];
        res[n-1] = n;
        st.push(n-1);
        for(int i = n-2;i>=0;i--){
            while(st.size() > 0 && arr[st.peek()] >= arr[i]){
                st.pop();
            }
            if(st.size() == 0){
                res[i] = n;
            }
            else{
                res[i] = st.peek();
            }
            st.push(i);
        }
        return res;
    }

    public int[] prevSmallest(int[] arr){
        Stack<Integer> st = new Stack<>();
        int n = arr.length;
        int[] res = new int[n];
        res[0] = -1;
        st.push(0);
        for(int i = 1;i<n;i++){
            while(st.size() > 0 && arr[st.peek()] >= arr[i]){
                st.pop();
            }
            if(st.size() == 0){
                res[i] = -1;
            }
            else{
                res[i] = st.peek();
            }
            st.push(i);
        }
        return res;
    }
    
    public int largestRectangleArea(int[] heights) {
        int[] pse = prevSmallest(heights);
        int[] nse = nextSmallest(heights);
        int ans[] = new int[heights.length];
        int max = 0;
        for(int i = 0;i<heights.length;i++){
            ans[i] = heights[i] * (nse[i] - pse[i] -1);
            max = Math.max(ans[i],max);
        }
        return max;
    }
}
